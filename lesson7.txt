pragma solidity ^0.8.0;

import "./BokkyPooBahsDateTimeLibrary.sol";

contract BirthdayPayout {

    string _name;

    address _owner;

    Teammate[] public _teammates;
// initialize new arr of birthdays=====================new added=======================================
    uint[] public _birthdayPool;

// initialize new variables============================new added=======================================
    uint256 todayDay = block.timestamp;
    uint256 public dayOfPay;


    struct Teammate {
        string name;
        address account;
        uint256 salary;
        uint256 birthday;
    }

    constructor() {
        _name="max";
        _owner = msg.sender;
    }

    function addTeammate(address account,string memory name, uint256 salary,uint256 birthday) public onlyOwner {
        require(msg.sender != account,"Cannot add oneself");
        Teammate memory newTeammate = Teammate(name,account,salary, birthday);
        _teammates.push(newTeammate);
        emit NewTeammate(account,name);
    }

    function findBirthday() public onlyOwner returns(uint[] memory) {
        require(getTeammatesNumber() > 0, "No teammates in the database");

        // clear new arr=========================================new added=======================================
        delete _birthdayPool;

        for(uint256 i = 0; i < getTeammatesNumber(); i++){
            if(checkBirthday(i)) {
                
            // fill new arr=======================================new added=======================================
                _birthdayPool.push(i);

            // check dates before paying==========================new added=======================================
                (, uint256 pay_month,uint256 pay_day) = getDate(dayOfPay);
                (, uint256 today_month,uint256 today_day) = getDate(todayDay);
                require(pay_month != today_month && pay_day != today_day, "You`ve already paied today");

            // function of payments===============================new added=======================================
                birthdayPayout(i);
            }
        }

        // checking items in new arr,
        // change new variable to initial day,
        // return new arr==========================================new added=======================================
        if (_birthdayPool.length > 0) {
            dayOfPay = todayDay;
            return _birthdayPool;
        }

        revert("Noone found");
    }

    function getBirthdayPool() view public returns(uint[] memory){
        return  _birthdayPool;
    }

   function birthdayPayout(uint256 index) public onlyOwner {
        sendToTeammate(index);
        emit HappyBirthday(_teammates[index].name,_teammates[index].account);
    }

    function getDate(uint256 timestamp) pure public returns(uint256 year, uint256 month, uint256 day){
        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);
    }

    function checkBirthday(uint256 index) view public returns(bool){
        uint256 birthday = getTeammate(index).birthday;
        (, uint256 birthday_month,uint256 birthday_day) = getDate(birthday);
        uint256 today = block.timestamp;
        (, uint256 today_month,uint256 today_day) = getDate(today);

        if(birthday_day == today_day && birthday_month==today_month){
            return true;
        }
        return false;
    }

    function getTeammate(uint256 index) view public returns(Teammate memory){
        return _teammates[index];
    }

    function getTeam() view public returns(Teammate[] memory){
        return  _teammates;
    }

    function getTeammatesNumber() view public returns(uint256){
        return _teammates.length;
    }

    function sendToTeammate(uint256 index) public onlyOwner{
        payable(_teammates[index].account).transfer(_teammates[index].salary);
    }

    function deposit() public payable{

    }

    modifier onlyOwner{
        require(msg.sender == _owner,"Sender should be the owner of contract");
        _;
    }

    event NewTeammate(address account, string name);

    event HappyBirthday(string name, address account);
}